{
  "hash": "c205f83b5ad433a39c16f6a1546306c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Complex Data Pipelines\"\nsubtitle: \"\"\nformat: \n  revealjs:\n    footer: \"[USCOTS Intermediate R Workshop](https://atheobold.github.io/uscots-intermediate-r/)\"\n    theme: [simple, styles.scss]\n    embed-resources: true\neditor: source\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Asking more complex research questions\n\n## Setup: Data\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 17\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 9 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>, sugar <dbl>,\n#   protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>, salad <chr>\n```\n\n\n:::\n:::\n\n\n\n\n## Background: Intro level RQs\n\n* The **Big Five** tidyverse verbs:\n\n    + `arrange`\n    + `filter`\n    + `mutate`\n    + `group_by`\n    + `summarize`\n    \n* (Doesn't have to be tidyverse syntax!)\n\n## thing\n\nType of basic questions:\n\n* `arrange` What item has **the most** calories?\n\n* `mutate` **Calculate** the saturated fat to total fat ratio of each item.\n\n* `summarize` What is the **median** calorie item?\n\n* `filter` **How many** items have more than 1000 calories?\n\n* `group_by` Same questions, but **within each** restaurant.\n\n## Intro pipelines\n\n* `mutate` -> `arrange` \"What item has the highest saturated fat to total fat ratio?\"\n\n* `mutate` -> `filter` \"How many items have more than 50% of total fat in saturated form?\"\n\n* `group_by` -> `summarize` -> `filter` \"How many restaurants have at least one 2000 calorie item?\"\n\n* any -> plot: \"Make a boxplot of average saturated fat percentages for items in each restaurant.\"\n\n# Designing pipeline activities\n\n## Sketch a plan\n\n## Reorder a pipeline\n\n## Fill in a blank\n\n## YOUR TURN\n\nJot down some RQs for intro-level pipelines.\n\n[timer]\n\n## Making it complex\n\nWays to level up **pipeline complexity** of the RQs:\n\n1. Changing the *cases/rows* (esp for *visualization*)\n\n2. Operations *inside* `mutate` or with `group_by`\n\n3. Many pivots, especially for *summary tables*\n\n4. Multiple datasets and *joins*\n\n\n## Change the cases/rows\n\n* Summarizing by group: rows become *restaurants* not *items*.\n\n* Pivoting: rows become *nutrition measurement for an item* rather than *items*.\n\n* Filter/distinct: rows become *flagship item of each restaurant* rather than *items*.\n\n* (condensing vs filtering)\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 17\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 9 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>, sugar <dbl>,\n#   protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>, salad <chr>\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n  restaurant  `mean(calories)`\n  <chr>                  <dbl>\n1 Arbys                   533.\n2 Burger King             609.\n3 Chick Fil-A             384.\n4 Dairy Queen             520.\n5 Mcdonalds               640.\n6 Sonic                   632.\n7 Subway                  503.\n8 Taco Bell               444.\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,210 × 5\n   restaurant item                             salad nutritional_item amount\n   <chr>      <chr>                            <chr> <chr>             <dbl>\n 1 Mcdonalds  Artisan Grilled Chicken Sandwich Other calories            380\n 2 Mcdonalds  Artisan Grilled Chicken Sandwich Other cal_fat              60\n 3 Mcdonalds  Artisan Grilled Chicken Sandwich Other total_fat             7\n 4 Mcdonalds  Artisan Grilled Chicken Sandwich Other sat_fat               2\n 5 Mcdonalds  Artisan Grilled Chicken Sandwich Other trans_fat             0\n 6 Mcdonalds  Artisan Grilled Chicken Sandwich Other cholesterol          95\n 7 Mcdonalds  Artisan Grilled Chicken Sandwich Other sodium             1110\n 8 Mcdonalds  Artisan Grilled Chicken Sandwich Other total_carb           44\n 9 Mcdonalds  Artisan Grilled Chicken Sandwich Other fiber                 3\n10 Mcdonalds  Artisan Grilled Chicken Sandwich Other sugar                11\n# ℹ 7,200 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 17\n  restaurant  item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n  <chr>       <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n1 Mcdonalds   Big Mac        540     250        28      10       1            80\n2 Chick Fil-A Chicken …      440     171        19       4       0            60\n3 Sonic       Sonic Ba…      870     530        59      20       2           140\n4 Arbys       Classic …      360     120        14       5       0.5          50\n5 Burger King WHOPPER …      760     430        47      16       1           100\n6 Dairy Queen DQ Ultim…      780     430        48      22       2           150\n7 Subway      Footlong…      620      80        10       4       0            80\n8 Taco Bell   Crunchwr…      540     190        21       6       0            30\n# ℹ 9 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>, sugar <dbl>,\n#   protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>, salad <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Do more with mutate\n\n##  `group_by` |> `mutate`\n\n**What is the highest-calorie single item at each restaurant?**\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 19\n# Groups:   restaurant [8]\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 11 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, max_calories <dbl>, prop_of_max_cal <dbl>\n```\n\n\n:::\n:::\n\n\n\n## YOUR TURN\n\nThink of a measurement *by category* that you might want to add to *every additional row* of your dataset, for purposes of comparing.\n\n## Pipelines inside mutate\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `flagship_calories = pull(filter(.data, item %in%\n  flagships), calories)`.\nℹ In group 1: `restaurant = \"Arbys\"`.\nCaused by error in `UseMethod()`:\n! no applicable method for 'filter' applied to an object of class \"rlang_data_pronoun\"\n```\n\n\n:::\n:::\n\n\n\n## String parsing\n\n**Find the median calories for a burger at each restaurant.**\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  restaurant  `median(calories)`\n  <chr>                    <dbl>\n1 Burger King                360\n2 Dairy Queen                470\n3 Mcdonalds                  300\n4 Sonic                      800\n```\n\n\n:::\n:::\n\n\n\n-> RegEx Opportunity\n\n## YOUR TURN\n\nFind a string column in your dataset, jot down 1-3 new *non-string* columns you might want to make by parsing that string.\n\n## Custom/complicated functions and mapping\n\n**YOUR TURN!**\n\n> Your city has just passed a law that fast food items need to contain a warning note if they have over 40% calories from fat, over 40% saturated fat, or any trans fats at all.\n\n> Write a function that creates a warning note based on an items nutritional information.\n\n> Then, use that function inside of `mutate` to add a warning label for each item.\n\n*timer*\n\n\n## Answer\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Answer\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 515 × 18\n   restaurant item      calories cal_fat total_fat sat_fat trans_fat cholesterol\n   <chr>      <chr>        <dbl>   <dbl>     <dbl>   <dbl>     <dbl>       <dbl>\n 1 Mcdonalds  Artisan …      380      60         7       2       0            95\n 2 Mcdonalds  Single B…      840     410        45      17       1.5         130\n 3 Mcdonalds  Double B…     1130     600        67      27       3           220\n 4 Mcdonalds  Grilled …      750     280        31      10       0.5         155\n 5 Mcdonalds  Crispy B…      920     410        45      12       0.5         120\n 6 Mcdonalds  Big Mac        540     250        28      10       1            80\n 7 Mcdonalds  Cheesebu…      300     100        12       5       0.5          40\n 8 Mcdonalds  Classic …      510     210        24       4       0            65\n 9 Mcdonalds  Double C…      430     190        21      11       1            85\n10 Mcdonalds  Double Q…      770     400        45      21       2.5         175\n# ℹ 505 more rows\n# ℹ 10 more variables: sodium <dbl>, total_carb <dbl>, fiber <dbl>,\n#   sugar <dbl>, protein <dbl>, vit_a <dbl>, vit_c <dbl>, calcium <dbl>,\n#   salad <chr>, healthy_fat_warning <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Non-one-to-one Joins\n\n## YOUR TURN\n\nLook at your collection of data - where are there keys to match?  Are any of them not one-to-one, or otherwise complex?\n\n## Multiple Pivots\n\n\n## YOUR TURN\n\nSketch a summary table that might be interesting for your data, then \"flip it\".\n\n<!-- # Teaching unit testing principles -->\n\n<!-- ## \"Checking in\" on the pipeline -->\n\n<!-- ## Look at the extremes -->\n\n<!-- ## Try to break it -->\n\n# Summary and resources\n\n## RegEx\n\n## Map/apply inside and outside\n\n## Custom functions for pipeline problems\n\n## List-cols\n\n\n## YOUR TURN\n\nFor your dataset, come up with some research questions that require a complicated pipeline to address. \n\nSketch out the steps needed to answer a research question.\n\nJot down some ideas about how you would make *transitional* student questions out of these - e.g., which steps would you show and which would you leave blank?\n\n*timer*\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}