{
  "hash": "e05ef6e8211997d45de892b660faee7f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Package-based Workflow\"\nsubtitle: \"\"\nformat: \n  revealjs:\n    footer: \"[Teaching Intermediate R](https://github.com/atheobold/uscots-intermediate-r)\"\n    theme: [simple, styles.scss]\n    embed-resources: true\neditor: source\n---\n\n\n\n\n# What is a package workflow?\n\n## Why a package workflow?\n\n* Ease students into *developer* mindset.\n\n* Emphasize *unit-testing* and *documentation* frameworks.\n\n* Practice with *code review* of others' code.\n\n* Easier to *performance check* code.\n\n* Grading via automatic tests.\n\n## How-to\n\n1. Create a **skeleton R package** on GitHub.\n\n2. Include **pre-written unit tests**.\n\n3. Include **vignette-style** function demos.\n\n4. Duplicate unit tests **with a new dataset** for your own use in grading.\n\n5. Require **code review** as part of assignment.\n\n## Student Assignment\n\n1. Complete the functions.\n\n2. Document the functions.\n\n3. Build the package.\n\n4. Run the unit tests.\n\n5. Render the demo document.\n\n## What do students turn in?\n\n1. A link to their GitHub of the package.  [I recommend GitHub Classroom for this.](https://classroom.github.com/)\n\n2. A rendered html, showing the functions being run on data.\n\n3. A code review of someone else's package.\n\n## Grading\n\nFour grading elements to combine:\n\n* Does the package **properly build and install** or are there errors?\n\n* Does the package pass the **provided unit tests**?\n\n* Do the package functions behave as expected in the **demo document**?\n\n* Are the **peer code reviews** positive?\n\n* Does the package pass the **secret unit tests**?\n\n\n# OUR TURN\n\n# Setup\n\n## Make a sandbox for yourself\n\n1. Make a folder somewhere called \"Package Assignment Practice\" or similar.\n\n2. Run `usethis::create_package(\"YOUR PATH/Package Assignment Practice/example_skeleton_package\")`.  This will open a new R Project.\n\n3. In the new project, run `usethis::use_r(\"simple_linear_regression\")`\n\n4. Run `usethis::use_test(\"simple_linear_regression\")`\n\n5. New File > Quarto > `slr_demo.qmd`\n\n\n## Create the demo document *first*\n\nInclude code that you hope will work properly...\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n... and code you hope will error in a reasonable way.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Sketch out the function\n\nHow much detail you provide depends on the level of your students.\n\nFor the first pass, I recommend:\n\n* Include *all* the `roxygen`-style documentation\n\n* Include the **inputs** and names.\n\n* Give them **a few lines** to get started.\n\n* Use **comments** to show where you want them to edit.\n\n* Provide the **object structure of the expected output**.\n\n* Make sure the code is all **runnable as-is**.  (But not fully correct yet!)\n\n## Example\n\n```\n#' Implements simple linear regression by hand\n#'\n#' @param dat A data frame\n#' @param response The name of a response variable in the data frame.\n#' @param explanatory The name of the explanatory variable in the data frame.\n#'\n#' @return A data frame of coefficients\n#'\n#' @import dplyr\n#'\n#' @export\nsimple_linear_regression <- function(dat, response, explanatory){\n\n  x <- dat[[explanatory]]\n  y <- dat[[response]]\n\n  x_bar <- mean(x)\n  y_bar <- mean(y)\n\n  ### Edit code after here\n\n  sd_x <- 1\n  sd_y <- 1\n\n  beta_0 <- 1\n  beta_1 <- 1\n\n  results <- tibble::tibble(\n    Intercept = 0,\n    Slope = 1\n  )\n\n  return(results)\n\n}\n```\n\n## Unit tests\n\n```\ntest_that(\"simple linear regression is correct\", {\n\n  my_result <- simple_linear_regression(mtcars, \"mpg\", \"hp\")\n\n  mass_result <- lm(mpg ~ hp, data = mtcars)\n\n  expect_equal(coef(mass_result)[['hp']], my_result$Slope,\n               tolerance = 0.05)\n  expect_equal(coef(mass_result)[[1]], my_result$Intercept,\n               tolerance = 0.05)\n\n})\n```\n\n## Secret Unit Tests\n\n* Make a **copy** of the `tests` folder in your package.\n\n* Save that copy **outside the package folder**, in your \"Package Assignment Practice\" folder.\n\n* Change the unit test code to use a **different dataset** or **different variables**.\n\n# Activity: Be the student\n\n## Auto-grading with secret tests\n\nOpen the script \"testthat.R\" ...\n\n```\nlibrary(testthat)\nlibrary(example_skeleton_package)\n\ntest_check(\"example_skeleton_package\")\n```\n\n... and run it!\n\n## Speed Tests, etc.\n\nDownload all the **zip files** and...\n\n```\nsubmissions <- list.files(\"./submissions\")\n\nall_test_results <- tibble()\nall_time_results <- tibble()\n\nfor (i in 1::length(submissions)){\n  \n    student <- submissions[i]\n  \n    unloadNamespace(\"example_skeleton_package\")\n    remove.packages(\"example_skeleton_package\", \".\")\n    \n    devtools::build(paste0(\"./submissions/\", student))\n\n    library(example_skeleton_package)\n\n    lr_test <- testthat::test_dir(\"./tests/testthat\",\n               reporter = \"minimal\",\n               stop_on_failure = FALSE)\n\n    benches <- bench::mark(\n      slr = safely(simple_linear_regression)(big_dat, price, gearbox),\n      memory = FALSE,\n      check = FALSE,\n      time_unit = \"ms\",\n      min_time = Inf,\n      max_iterations = 20,\n      filter_gc = FALSE\n    ) %>%\n      select(\n        expression, median\n      ) \n      \n      ## save output\n    \n}\n```\n\n## Working with GitHub\n\nIf student work is on GitHub rather than in folders...\n\n```\nremotes::install_github(\"imastudent/example_skeleton_package\")\n```\n\n... and loop through each.\n\n## Ways to level up\n\n* Tidy eval\n\n* Package creation/design\n\n* Implementing stat algorithms\n\n* Speed and memory tests using secret unit tests\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}