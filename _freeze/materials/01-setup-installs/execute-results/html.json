{
  "hash": "fbfb794fdb58e2765dbb118af9a8baec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workshop Installs & Set-up\"\nsubtitle: \"\"\nformat: \n  revealjs:\n    footer: \"[USCOTS Intermediate R Workshop](https://atheobold.github.io/uscots-intermediate-r/)\"\n    theme: [simple, styles.scss]\n    embed-resources: true\neditor: source\n---\n\n\n\n\n\n\n# Setup\n\n\n## Make sure you are up to date\n\n-   Are you on the latest version of RStudio:  [`v2025.05.1`; we at least require `v2023.03.0+386` or later](https://posit.co/download/rstudio-desktop/)\n\n-   Are you on the latest version of Quarto: [`v1.3.340` or later](https://quarto.org/docs/get-started/) *(This installs with RStudio, so you shouldn't need to do anything except in unusual cases.)*\n\n-   Are you on the latest version of R: [`v4.5.0`; we require `v4.3.0` or later](https://cran.r-project.org/)\n\n## Download course materials\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"usethis\")\n\nusethis::use_course(\"atheobold/uscots-intermediate-r\")\n```\n:::\n\n\n\n\n\n\n## Package installs\n\n**Option A:** In the course project, open `installs.R` and run all.\n\n**Option B:** Copy paste and run:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <- c(\n  \"tidyverse\",\n  \"tidymodels\",\n  \"data.table\",\n  \"duckdb\"\n  ### Allison and Tyson add\n)\n\ninstall.packages(packages)\n```\n:::\n\n\n\n\n\n# Overview of a project-based Intermediate R course \n\n# What is *Intermediate R*?\n\n## Is it this?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput$plot <- renderPlot({\n  req(input$var)\n  ggplot(data(), aes_string(input$var)) +\n    geom_histogram()\n})\n```\n:::\n\n\n\n\n## ... or this?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- dt[\n  score > 50 & !is.na(category),\n  .(mean_score = mean(score), n = .N),\n  by = .(category, region)\n][order(-mean_score)\n ][, rank := .I\n ][n > 10]\n```\n:::\n\n\n\n\n## ... or this?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- data_main %>%\n  left_join(meta_info, by = \"id\") %>%\n  pivot_longer(cols = starts_with(\"score_\"), names_to = \"metric\", values_to = \"score\") %>%\n  filter(!is.na(score)) %>%\n  group_by(group, metric) %>%\n  summarize(mean_score = mean(score), .groups = \"drop\") %>%\n  pivot_wider(names_from = metric, values_from = mean_score) %>%\n  inner_join(group_labels, by = \"group\") %>%\n  arrange(desc(overall))\n```\n:::\n\n\n\n\n# Our answer: YES!\n\n# What is *Intro R*?\n\n## Plenty of resources...\n\n::::: {.columns layout-ncol=\"2\"}\n::: column\n![](images/00-r4ds.jpg)\n:::\n\n::: column\n![](images/00-book-of-r.jpg)\n:::\n:::::\n\n## ... and generally agreed-upon topics.\n\n-   Basics of coding: **variables and objects**; **loops and conditionals**; etc.\n\n-   Installing and loading **packages**\n\n-   Object **types** and **structures**\n\n-   Loading and examining **data**\n\n-   Basic **visualization**\n\n-   Data **wrangling** (\"Big 5\" tidyverse verbs, or equivalent)\n\n# What is *Advanced R*?\n\n## Is it *just* programming? Of course not!\n\n![](images/00-advR.jpg){fig-align=\"center\"}\n\n# What is *Intermediate R*?\n\n## *Intermediate R* is NOT *Intermediate Statistics*\n\n-   The hardest part of fitting statistical models in R is the statistical concepts and interpretation not the coding.\n\n-   \"\\[Statistical Topic\\] with R\" is not the same class!\n\n-   **Our course focuses on *R Skills* and requires only *second-year statistics* knowledge.**\n\n## *Intermediate R* is **non-linear**\n\n-   It is not a bridge between *Intro R* and *Advanced R*\n\n-   It is not a set of skills that builds progressively\n\n-   It *is* a collection of learning paths (sometimes overlapping) towards a specific end goal.\n\n-   **Our course has *three units* that can be rearranged *modularly**\n\n## *Intermediate R* is **defined by goals**\n\n-   Different R learners have wildly different needs.\n\n-   There is no single skill that every Intermediate R user must know!\n\n-   Instead, identify a **use case** and **goal** that is not achievable with Intro R skills, and fill in the missing skills.\n\n-   **Our course is *project-driven*, not exam or assignment based.**\n\n## The structure:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"grViz html-widget html-fill-item\" id=\"htmlwidget-91fb076634e852db4a05\" style=\"width:960px;height:480px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-91fb076634e852db4a05\">{\"x\":{\"diagram\":\"\\ndigraph flowchart {\\n  graph [rankdir = TB]  // left-to-right layout\\n\\n  // Nodes\\n  node [shape = box, style = \\\"rounded,filled\\\", fontname = Helvetica]\\n\\n  A [label = \\\"Intro R\\\", fillcolor = \\\"palegreen1\\\"]\\n  B1 [label = \\\"R Programming\\\", fillcolor = \\\"cadetblue1\\\"]\\n  B2 [label = \\\"Intermediate R for DS\\\", fillcolor = \\\"cadetblue1\\\"]\\n  B3 [label = \\\"Extensions and Deliverables\\\", fillcolor = \\\"cadetblue1\\\"]\\n  C1 [label = \\\"Advanced R (Wickham)\\\", fillcolor = \\\"plum1\\\"]\\n  C2 [label = \\\"Advanced Statistical Computing\\\", fillcolor = \\\"plum1\\\"]\\n  C3 [label = \\\"Multilingual Projects\\\", fillcolor = \\\"plum1\\\"]\\n  \\n  // Rank groupings to align nodes horizontally\\n  {rank = same; B1; B2; B3}\\n  {rank = same; C1; C2; C3}\\n\\n  // Edges\\n  A -> B1\\n  A -> B2\\n  A -> B3\\n\\n  B1 -> C1\\n  B2 -> C2\\n  B3 -> C3\\n}\\n\",\"config\":{\"engine\":\"dot\",\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\n# Three Modular Units\n\n:::::: {.columns layout-ncol=\"3\"}\n::: column\n![](images/R-data.png){.circular-img fig-align=\"center\"} Data Science\n:::\n\n::: column\n![](images/R-prog.png){.circular-img fig-align=\"center\"} Programming\n:::\n\n::: column\n![](images/R-deliv.png){.circular-img fig-align=\"center\"} Deliverables\n:::\n::::::\n\n# Unit A: Intermediate **R for Data Science**\n\n![](images/R-data.png){.circular-img fig-align=\"center\"}\n\n## Unit A: Intermediate **R for Data Science**\n\n## Learning Objectives\n\n1.  Manage, process, and load data from **non-tabular** and **non-local sources**.\n\n2.  Clean and prepare **messy and unstructured data**, including handling missing values, and the use of **regular expressions** to extract information from text data.\n\n3.  Use **joins** to combine multiple datasets with many-to-many relationships.\n\n4.  Use complex data wrangling pipelines, including **multiple pivots** and/or **multiple grouping levels**, to wrangle data.\n\n\n## Unit A Project\n\nStudents will produce a **stylized, publication-ready report** that performs **exploratory data analysis** to address specific research questions.\n\nData for the report will be taken from multiple **online** and **non-csv** sources, and will require the use of **regular expressions** to collect, clean, or wrangle their data.\n\nResearch questions will be provided that require **complex, multi-step data wrangling**, and results should be communicated using **complex and polished visualizations**.\n\n## Unit A Project - Example\n\n**Regional Differences in Fast Food Preference**\n\n. . .\n\n*Data:* Refer to [this dataset](https://www.kaggle.com/datasets/khushishahh/fast-food-restaurants-across-us) of fast food locations across the US. Then, use Yelp's [open dataset for education](https://business.yelp.com/data/resources/open-dataset/) to find reviews and other information pertaining to fast food restaurants.\n\n## Unit A Project - Example\n\n**Regional Differences in Fast Food Preference**\n\n. . .\n\n*Research Questions:*\n\n-   Are certain fast food brands *more prevalent* in different regions of the US than others?\n\n-   Are certain fast food chains *more highly rated* in different regions of the US than others?\n\n-   Do reviewers use *different language* in their reviews in different regions?\n\n-   Do customers have *different priorities* for what they look for in fast food restaurants in different regions?\n\n# Unit A skills and resources\n\n## Non-tabular and non-local data\n\n-   `jsonlite` and `XML` packages for hierarchical data structures.\n\n-   `odbc`, `DBI`, and `dbplyr` for cloud database-stored data\n\n-   `duckdb` and `arrow` for local database storage.\n\n-   `data.table` for large in-memory data\n\n## Messy and unstructured data\n\n-   `naniar` for dealing with missing values\n\n-   `stringr` and [regular expressions](https://r4ds.hadley.nz/regexps.html) for processing text variables\n\n-   Basic content from [Text Mining in R](https://www.tidytextmining.com/) and the `tidytext` package\n\n-   [Data cleaning principles](https://nceas.github.io/sasap-training/materials/reproducible_research_in_r_fairbanks/hands-on-clean-and-integrate-datasets.html) from *Reproducible Analysis with R*.\n\n## Multiple datasets joining\n\n-   `*_join()` functions from `dplyr`\n\n-   Concepts of *mutating joins* and *filtering joins* ([R4DS Chapter 19](https://r4ds.hadley.nz/joins.html))\n\n-   `dbplyr` and/or `arrow` to perform joins at database level\n\n## Complex data wrangling pipelines\n\n-   Creation and matching of *keys* in relational data\n\n-   Pivoting with `pivot_*()` functions from `tidyr` (content needed!)\n\n-   `group_by()` to `mutate()` pipeline constructions\n\n-   Use of *vectorized functions* or `map/apply` inside `mutate()`\n\n-   Iteration with `purrr` or `apply` functions.\n\n## More advanced visualizations\n\n-   `geom_text()` and `geom_annotate()` for annotations\n\n-   New plot types from ggplot helpers - e.g. ridgelines from `ggridges`; alluvial plots with `ggsankey`, radar plots with `fmsb` and `ggradar`.\n\n-   Chloropleths with `leaflet` and `sf`.\n\n-   Great resource: [R Graph Gallery](https://r-graph-gallery.com/)\n\n\n# Unit B: **Extensions and Deliverables in R**\n\n![](images/R-deliv.png){.circular-img fig-align=\"center\"}\n\n## Learning Goals\n\n-  Produce visualizations beyond basic geometries, including **maps** and **annotated** plots.\n\n-   Incorporate **interactivity** into data reports.\n\n-   Adopt **extensions** from peripheral software and packages, such as `quarto`.\n\n-   Add **statistical** elements to data analysis pipeline.\n\n-   Produce **production-quality** plots and tables.\n\n## Unit C Project\n\nStudents will create an **interactive dashboard** that integrates advanced R features, such as Shiny, Quarto dashboards, or Plotly, to explore and communicate a research question effectively.\n\nThe dashboard will include **statistical results** that are well-summarize, well-visualized, and well-interpreted.\n\n## Unit C Project - Example\n\n**Fast Food Preferences at McDonald's**\n\n. . .\n\nUsing your Yelp analyses from *Unit A* and your menu analyses from *Unit B*, create a dashboard to understand **trends and preferences for McDonald's customers**. The dashboard must be *deployed* for online access.\n\n## Unit C Project - Example\n\n**Fast Food Preferences at McDonald's**\n\n. . .\n\nYour dashboard must be *interactive* and *accessible* to non-technical audiences. It should communicate trends in regions as well as connecting Yelp review language to specific menu items.\n\nYou must include an element of results of a *statistical model or test*, communicated to non-technical audiences.\n\n# Unit C skills and resources\n\n## Interactivity\n\n-   `plotly()` for immediately interactive plots\n\n-   `Shiny` for user input\n\n-   [Mastering Shiny](https://mastering-shiny.org/) textbook\n\n## Extensions and peripheral software\n\n![](images/00-logo-quarto.png)\n\n-   `Quarto`: Dashboards, themes, websites, etc. etc.\n\n-   `reactjs` for animated visualization\n\n-   \"Branding\" use of css/scss.\n\n## Statistical elements\n\n-   `tidymodels` for predictive modeling\n\n-   `tidyclust` for unsupervised learning\n\n-   Bootstrapping or resampling results\n\n## Production-quality plots and tables\n\n-   [Writing custom ggplot themes](https://themockup.blog/posts/2020-12-26-creating-and-using-custom-ggplot2-themes/)\n\n-   Annotating plots with `geom_text()` etc.\n\n-   `gt()` for better tables\n\n# Unit C: **R Programming**\n\n![](images/R-prog.png){.circular-img fig-align=\"center\"}\n\n## Learning Goals\n\n-   Apply **function creation** and **code design** techniques\n\n-   Engage in **algorithmic thinking**, including **iteration**.\n\n-   Consider **speed** and **efficiency** concerns in code tasks.\n\n-   Develop a **reproducible workflow** for code development in R.\n\n-   Engage in **unit testing** and **code review**, including of others' code.\n\n## Unit C Project\n\nStudents will create a working and installable **R package** that is well-documented and tracked via version control. The package must include a demonstration document (or \"vignette\") and several basic informal unit tests.\n\nThe package should provide well-designed and user-friendly **functions** to streamline a data collection, wrangling, and/or analysis task.\n\nCode design should consider issues of **efficiency** and should demonstrate both *tidyverse* and *non-tidyverse* syntax fluency.\n\n## Unit C Project - Example\n\n> Creating your own webscraping API\n\n. . .\n\nCreate an R package that provides functions to scrape, clean, and wrangle data from the [McDonald's menu](https://www.mcdonalds.com/us/en-us/full-menu.html). Then, provide a vignette document demonstrating use of this package. This package must be hosted on GitHub in proper installable format.\n\n## Unit C Project - Example\n\n> Creating your own webscraping API\n\n. . .\n\nYour code and/or vignette must:\n\n-   Include at least one use of iteration with `purrr`\n\n-   Include use of `data.table` code for large data preparation tasks.\n\n-   Be well-commented and code reviewed by peers.\n\n# Unit C skills and resources\n\n## Function creation and code design\n\n-   [R Packages](http://r-pkgs.org/) textbook, first section. (Wickham and Bryan)\n\n-   [Code Smells and Feels](https://youtu.be/7oyiPBjLAWY) talk by Jenny Bryan\n\n-   [R4DS Chapter 20](https://r4ds.hadley.nz/functions.html)\n\n## Algorithmic thinking and iteration\n\n-   [R4DS Chapter 26](https://r4ds.hadley.nz/iteration.html)\n\n-   [R Programming for Data Science](https://bookdown.org/rdpeng/rprogdatascience/profiling-r-code.html)\n\n-   *CS 101* resources for algorithms (content needed!)\n\n-   Create methods from scratch: basic linear regression, kmeans clustering, generative art, bootstrapping or randomization tests.\n\n## Speed and efficiency\n\n-   Use `tictoc` for informal speed testing; `proc.time()` for more specific speed testing; or `profileR` for full profiling.\n\n-   [Advanced R Chapter 23](https://adv-r.hadley.nz/perf-measure.html)\n\n-   [R Programming for Data Science](https://bookdown.org/rdpeng/rprogdatascience/profiling-r-code.html)\n\n-   `data.table` for many groupings and concise syntax (content coming soon!)\n\n## Reproducible workflow\n\n-   [Happy Git with R](https://happygitwithr.com/) textbook\n\n-   Teacher resource: [GitHub Classroom](https://classroom.github.com/) for providing skeleton code and controlling student repos.\n\n-   `testthat` for creating formal unit tests.\n\n-   `roxygen2` for function documentation\n\n## Unit testing and code review\n\n-   [R Packages Chapter 13](https://r-pkgs.org/testing-basics.html)\n\n-   [Functional programming and unit testing for data munging with R](https://b-rodrigues.github.io/fput/unit-testing.html) online textbook\n\n-   *Computer science resources* for code review principles (content needed!)\n\n-   [Code testing and review](https://carpentries-incubator.github.io/managing-computational-projects/13-codereview.html) content from the *Data Carpentries*.\n\n## A few stretch goals\n\n-   Package passes *CRAN* checks.\n\n-   Use of *object-oriented programming*\n\n-   Advanced *debugging*, e.g. with `debugonce()` or `browser()`\n\n\n# Modularity\n\n## Order of Units\n\n-   C -\\> A: Begin with webscraping, then incorporate other data and use it for analysis.\n\n-   B -\\> A: Design a dashboard with simple, Intro R level analyses; then enhance the dashboard with more complex data.\n\n-   C -\\> B: Create webscraping or data anaysis package, then use it underlying a dashboard.\n\n## Overlap in content\n\n-   `data.table` and friends can be emphasized in **A** for wrangling tasks, or in **C** as an efficiency/syntax skill.\n\n-   `plotly` and friends can be used in **A** for easy plot upgrade, or in **B** for interactive dashboards\n\n-   *Git* and *GitHub* can be introduced in **any Unit**.\n\n-   *function writing* can be used to streamline steps in units **A** or **B** \n\n## Takeaways\n\n::::: columns\n::: column\n-   Design your *Intermediate R* class around **projects**\n\n-   Separate content into **modular units** organized by *goals*.\n\n-   Sign up to be notified when the *Course in a Box* is available!\n:::\n\n::: column\n![](images/10-QR.png)\n:::\n:::::\n\n# Now - let's sketch out our course together!\n\n## Why are you here?\n\nWhat inspired you to sign-up for this workshop? \n\nWhat are **two** goals you have related to teaching intermediate R?\n\n::: {.callout-important}\n# Make SMART goals!\n\nFind goals that are **specific**, that you can **measure**, that you can \n**achieve** in the next 1.5 days, and that are **relevant** to your teaching! \n:::\n\n## Activity: Find Your Data Sources\n\nIn pairs, come up with a data context and a few broad research questions.\n\nFind online as many of the following as you can related to your data context:\n\n1. Clean tabular datasets, e.g. kaggle or tidytuesday\n\n2. Messy or non-tabular datasets, e.g. JSONs or tables on a webpage\n\n3. API sources related to your data\n\n4. Massive datasets\n\n*We recommend starting a Google Doc or similar with your group, to collect references to datasets, as well as content from future activities.*\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_31c6aef9\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/grViz-binding-1.0.11/grViz.js\"></script>\n<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}